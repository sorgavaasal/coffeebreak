package com.project.euiler;

import java.util.Arrays;

/*
 * The four adjacent digits in the 1000-digit number
 *  that have the greatest product
 *   are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit 
number that have the greatest product. 
What is the value of this product?
 */
public class LargestProductSeries {
	
	public static long getProductSeries(String strNum, int wordLimit) {
		
		char[] numArray = strNum.toCharArray();
		int j = 0;
		long product = 1;
		long prevProduct = 1;
		int k=0;
		StringBuilder myBuilder = new StringBuilder();

		while (j < numArray.length) {
			for (k=j; k<j+wordLimit; ++k) {
				if (k >= numArray.length) {
					break;
				}
				System.out.print(numArray[k]);
				//myBuilder.append(numArray[k]);
//				if (Character.getNumericValue(numArray[k]) == 0) 
//					continue;
				product = product * Character.getNumericValue(numArray[k]);
			}
			System.out.print(" ");
			System.out.print(product + " " + String.valueOf(product).length() + " " + myBuilder.length() + " " + myBuilder.toString());
			System.out.println(" ");
			myBuilder.setLength(0);
			
			if (product > prevProduct) 
				prevProduct = product;
			
			//j = j + wordLimit;
			//8399879790879
			//8 x 3 x 9 x 9 x 8 x 7 x 9 x 7 x 9 x 0 x 8 x 7 x 9 = 31109847552.
			//23514624000
			++j;
			product = 1;	
		}
				
		return prevProduct;
	}
	
	private static void getCopiedSolution() {
		String s = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712182274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
        long largestProduct = 0;

        for (int i = 0; i < s.length() - 13; i ++) {
            long product = 1;

            for (int j = i; j < i + 13; j++) {
                product *= Integer.parseInt(s.substring(j, j + 1));
            }
            if (product > largestProduct) largestProduct = product;
        }
        System.out.println(largestProduct);
	}
	
	public static void main(String[] args) {
		String[] inputNum = {"73167176531330624919225119674426574742355349194934",
		"96983520312774506326239578318016984801869478851843",
		"85861560789112949495459501737958331952853208805511",
		"12540698747158523863050715693290963295227443043557",
		"66896648950445244523161731856403098711121722383113",
		"62229893423380308135336276614282806444486645238749",
		"30358907296290491560440772390713810515859307960866",
		"70172427121883998797908792274921901699720888093776",
		"65727333001053367881220235421809751254540594752243",
		"52584907711670556013604839586446706324415722155397",
		"53697817977846174064955149290862569321978468622482",
		"83972241375657056057490261407972968652414535100474",
		"82166370484403199890008895243450658541227588666881",
		"16427171479924442928230863465674813919123162824586",
		"17866458359124566529476545682848912883142607690042",
		"24219022671055626321111109370544217506941658960408",
		"07198403850962455444362981230987879927244284909188",
		"84580156166097919133875499200524063689912560717606",
		"05886116467109405077541002256983155200055935729725",
		"71636269561882670428252483600823257530420752963450"};
		
		long startTime = System.currentTimeMillis();
		StringBuilder builtNum = new StringBuilder();
		Arrays.stream(inputNum).forEach(builtNum::append);
		System.out.println("Largest product: " +getProductSeries(builtNum.toString(), 13));
		long endTime = System.currentTimeMillis();
		long timeTaken = endTime - startTime;
		System.out.println("startTime===>" +startTime);
		System.out.println("EndingTime===>" +endTime);
		System.out.println("TimeTaken===>" +timeTaken);
		//getCopiedSolution();
	}

}

// result after manually calculated in calculator 31109847552
// highest value from the program is 31109847552