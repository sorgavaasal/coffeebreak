package com.project.euiler;

import java.util.ArrayList;
import java.util.List;

/***
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Problem number 12 
 * @author Srividhya
 *
 */
public class HighlyDivisibleTriangleNumber {
	
	private static void generateTriangleNums() {
		
		int i = 0;
		long summGauss = 0;
		
		while (true) {
			++i;
			// usual way of finding summ of a numbers
/*			for (j=0; j <= i; ++j) {
				summStr.append(j);
				if (j != i) 
					summStr.append(" + ");
				sum += j;
			}
			summStr.append(" = ");
			summStr.append(sum);
*/			//System.out.println(summStr.toString());
			
			//Carl Gauss way of finding summ of n numbers 
			summGauss = (i * (i + 1)) / 2;
			List<Integer> factors = getFactors(summGauss);
			if (i % 100 == 0) {
				System.out.println("currentSummGauss===> " +summGauss + " " + i + " " +factors.size());
			}
			if (factors.size() > 500) {
				System.out.println("currentSummGauss with over 500 factors ===> " +summGauss + " " + i + " " +factors.size());
				break;
			}
			//System.out.println(summGauss + " " + factors);
			summGauss = 0;
		}
	}
	
	private static List<Integer> getFactors(long summGauss) {
		List<Integer> listFactors = new ArrayList<>();
		
		int i = 1;
		for (i = 1; i <= summGauss; ++i) {
			if (summGauss % i == 0) 
				listFactors.add(i);
		}
		
		return listFactors;
	}

	public static void main(String[] args) {
		generateTriangleNums();
	}

}
